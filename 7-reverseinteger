# # time complexity O(n)
# # space complexity 0(n)
# class Solution:
# def reverse(self, x: int) -> int:
#     if x >= 0:
#         y = int(str(x)[::-1])    
#     else:
#         y = -1*int(str(x*-1)[::-1])

#     minimo = -2**31
#     maximo = 2**31-1

#     if y not in range(minimo,maximo):
#         return 0
#     else:
#         return y

#O(n), n is the number of digits of the input
#O(1)
class Solution:
    def reverse(self, x: int) -> int:
        
        def mod(num, m):
            if num < 0:
                return num % -m
            return num % m
        
        min_Limit = -2**31   #-2147483648
        max_Limit = 2**31-1  # 2147483647
        
        res = 0
        while x:
            pop = mod(x, 10)
            x = int(x/10)
            if res > int(max_Limit/10) or (res == int(max_Limit/10) and pop > 7):
                return 0
            if res < int(min_Limit/10) or (res == int(min_Limit/10) and pop < -8):
                return 0
            res = res*10 + pop
        return res
